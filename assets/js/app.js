/**
 * @version v1.0.0
 * @author Janis Rublevskis <janis@xit.lv>
 * @todo check if fontforge installed on windows
 * @todo check if fontforge installed on osx
 * @todo add loader while initialising system
 */
"use strict";

var path = require("path"),
    fs = require("fs"),
    exec = require("child_process").execSync,
    bn = require("bootstrap.native"),
    os = require("os");

document.title += ' ' + process.env.npm_package_version;

var win = nw.Window.get();

var helper = {
    extend: function () {
        for (var i = 1; i < arguments.length; i++)
            for (var key in arguments[i])
                if (arguments[i].hasOwnProperty(key))
                    arguments[0][key] = arguments[i][key];
        return arguments[0];
    },
    addEvent: function(el, type, handler) {
        if (el.attachEvent) el.attachEvent('on' + type, handler); else el.addEventListener(type, handler);
    },

    live: function(event, selector, callback, context) {
        if(selector.match(/^\./)) { //class
            this.addEvent(context || document, event, function(e) {
                var qs = (context || document).querySelectorAll(selector);
                if (qs) {
                    var el = e.target || e.srcElement, index;
                    while (el && ((index = Array.prototype.indexOf.call(qs, el)) === -1)) {
                        el = el.parentElement;
                    }
                    if (index > -1) callback.call(el, e);
                }
            });
        } else {
            selector = selector.replace(/^#/, '');
            this.addEvent(context || document, event, function(e) {
                var found, el = e.target || e.srcElement;
                while (el && !(found = el.id === selector)) el = el.parentElement;
                if (found) callback.call(el, e);
            });
        }
    },
    show: function(el) {
        el.style.display = 'block';
    },

    hide: function (el) {
        el.style.display = 'none';
    },

    append: function(el, data) {
        el.appendChild(this.html2element(data));
    },

    prepend: function (el, data) {
        el.insertBefore(this.html2element(data), el.firstChild);
    },

    html2element:function (html) {
        var template = document.createElement('template');
        template.innerHTML = html;
        return template.content.firstChild;
    }
};

var app = {

    init: function () {
        this.initSettings();
        this.debugger();
        this.emptyTemp();
        this.buildMenu();
        this.fileChooser();
        this.removeItem();
        this.clearList();
        this.generateFonts();
        this.clickEvents();

        /**
         * TODO: clear Temp folder on run
         */
    },

    /** =========================== settings ===================================== **/
    /**
     * default settings
     */
    defaultSettings: {
        debug: true,
        settingsFile: 'font-convert-settings.json',

        /**
         * path to fontforge executable
         */
        fontForgePath: null
    },

    /**
     * settings generated by initSettings
     */
    settings: {},

    settingsWindow: function (options) {
        options = options || {
            focus: ''
        };
        if (this.isDebug()) {
            console.log("Settings window opened");
        }
        if (options.focus) {
            document.getElementById('settings-window').addEventListener("shown.bs.modal", function () {
                try {
                    document.getElementById(options.focus).focus();
                } catch (e) {
                }
            }, false);
        }
        this.settingsModal.show();
    },

    /**
     * Add setting to property
     *
     * @param key
     * @param value
     */
    settingsSet: function (key, value) {
        this.settings[key] = value;
    },

    settingsGet: function (key) {
        return this.settings[key] || null;
    },

    /**
     * reload settings
     * @param newSettings object
     */
    reloadSettings: function (newSettings) {
        if (newSettings) {
            this.settings = helper.extend(this.settings, newSettings)
        }
    },

    /**
     * save settings to file
     *
     * @param settings object
     * @param callback function
     * @todo on changing fontForge path, check if it is valid
     */
    saveSettings: function (settings, callback) {
        var filePath = path.join(nw.App.dataPath, this.settings.settingsFile);
        var scope = this;
        fs.writeFile(filePath, settings, function (err) {
            if (err) {
                if (scope.isDebug()) {
                    console.info("There was an error attempting to save your data.");
                    console.warn(err.message);
                }
            } else if (callback) {
                callback();
            } else {
                scope.reloadSettings(settings);
            }
        });
    },

    /**
     * init settings
     */
    initSettings: function () {
        this.reloadSettings(this.defaultSettings);
        var settings = {};
        try {
            settings = require(path.join(nw.App.dataPath, this.settings.settingsFile));
        } catch (e) {
            if (this.isDebug()) {
                console.log('Settings file cannot be found! No saved yet');
                // console.log(e);
            }
        }
        this.reloadSettings(settings);

        if (!this.settingsGet("fontForgePath")) {
            this.checkForFontForge();
        }
        if (!this.settingsGet("fontForgePath")) {
            this.showWarning("Cannot Find dependency: <strong>fontforge</strong>. Please install it or provide path to executable in <a href='#' data-focus='fontForgePath' class='show-settings'>Settings</a>!");
        }
        this.showWarning("Cannot Find dependency: <strong>fontforge</strong>. Please install it or provide path to executable in <a href='#' data-focus='fontForgePath' class='show-settings'>Settings</a>!");

    },

    /** ----------------------- settings ----------------------- **/

    allowedFontTypes: ["ttf", "otf"],
    fontFiles: [],

    clearButton: document.getElementById('clear-list'),
    convertFontsButton: document.getElementById('convert-fonts'),
    statusBar: document.getElementById('status-bar'),
    loader: document.getElementById('loader'),
    settingsModal: (new bn.Modal(document.getElementById('settings-window'))),


    weightOptions: {
        "100": "Extra light (100)",
        "200": "Thin (200)",
        "300": "Light (300)",
        "400": "Regular (400)",
        "500": "Medium (500)",
        "600": "Semi Bold (600)",
        "700": "Bold (700)",
        "800": "Black (800)",
        "900": "Extra Black (900)"
    },

    styleOptions: {
        "normal": "Normal",
        "italic": "Italic"
    },

    tempPath: path.join(nw.App.dataPath, 'Temp'),

    isDebug: function () {
        return this.settings.debug === true;
    },

    debugger: function () {
        if (this.isDebug()) {
            console.log("App Config path: ", nw.App.dataPath);
            console.log("Temp path:", this.tempPath);
        }
    },

    /**
     * Setting message in status bar
     * @param message
     */
    setStatusMessage: function (message) {
        this.statusBar.innerHTML = message;
    },

    /**
     * setting warning message
     * @param text
     */
    showWarning: function (text) {
        var warnings = document.getElementsByClassName('alert-danger');
        if (warnings.length > 0) {
            warnings[0].innerHTML = text;
        } else {
            helper.prepend(document.getElementsByClassName('container')[0], '<div class="alert alert-danger alert-dismissible fade show" role="alert">' + text + '</div>');
        }
    },

    clickEvents: function () {
        var scope = this;
        helper.live('click', '.show-settings', function (event) {
            var el = this;
            var options = {
                focus: el.dataset.focus
            };
            event.preventDefault();
            scope.settingsWindow(options);
        });
    },

    fileChooser: function () {
        var scope = this;
        document.getElementById('chose-fonts').addEventListener('click', function (event) {
            event.preventDefault();

            var chooser = document.querySelector("#fonts");
            chooser.addEventListener("change", function () {
                scope.parseFonts(this.value);
                scope.rebuildList();
                this.value = '';
            }, false);

            chooser.click();
        }, false);
    },

    /**
     *
     * @param fonts
     * @returns {*}
     */
    parseFonts: function (fonts) {
        if (fonts) {
            fonts = fonts.split(';');
            for (var i = 0; i < fonts.length; i++) {
                var ext = this.getExtension(fonts[i]);
                if (this.allowedFontTypes.indexOf(ext) !== -1) {
                    if (!this.isDuplicate(fonts[i])) this.fontFiles.push(fonts[i]);
                }
            }
        }

        if (this.fontFiles.length > 0) {
            helper.show(this.clearButton);
            helper.show(this.convertFontsButton);
            this.setStatusMessage("Fonts loaded");
        } else {
            helper.hide(this.clearButton);
            helper.hide(this.convertFontsButton);
            this.setStatusMessage("No fonts found. Please chose ttf or otf font file/s");
        }
    },

    getExtension: function (fontName) {
        return fontName.split('.').pop().toLowerCase();
    },

    isDuplicate: function (font) {
        font = font.replace(/\.(otf|ttf)$/, '');
        for (var i in this.fontFiles) {
            if (this.fontFiles.hasOwnProperty(i)) {
                if (this.fontFiles[i].replace(/\.(otf|ttf)$/, '') === font) {
                    return true;
                }
            }
        }
        return false;
    },

    rebuildList: function () {
        var tBody = document.querySelector("#font-table tbody");

        var currentList = this.currentList();

        tBody.innerHTML = '';

        for (var i = 0; i < this.fontFiles['length']; i++) {
            var font = path.normalize(this.fontFiles[i]);
            var fontName = font.split('/').pop();
            var curWeight = null, curStyle = null;

            if (typeof currentList[fontName] !== 'undefined') {
                curWeight = currentList[fontName].weight;
                curStyle = currentList[fontName].style;
            } else {
                curWeight = this.getWeight(fontName);
                curStyle = this.getStyle(fontName);
            }

            var html = '<tr data-file="' + font + '" data-name="' + fontName + '">'
                + '<td class="strong">' + fontName + '</td>'
                + '<td>' + this.makeSelect("weight['" + fontName + "']", this.weightOptions, curWeight) + '</td>'
                + '<td>' + this.makeSelect("style['" + fontName + "']", this.styleOptions, curStyle) + '</td>'
                + '<td><a href="#" class="btn btn-sm btn-danger remove-font"><i class="delete"></i></a></td>'
                + '</tr>';
            helper.append(tBody, html);
        }
    },

    removeItem: function () {
        var scope = this;
        helper.live('click', '.remove-font', function (event) {
            event.preventDefault();

            var row = this.parentNode.parentNode;
            for (var i = 0; i < scope.fontFiles.length; i++) {
                if (scope.fontFiles.hasOwnProperty(i)) {
                    if (scope.fontFiles[i] === row.dataset.file) {
                        scope.fontFiles.splice(i, 1);
                        break;
                    }
                }
            }

            scope.setStatusMessage("Font <strong>" + row.dataset.name + "</strong> removed");

            row.parentNode.removeChild(row);

            if (scope.fontFiles.length === 0) {
                helper.hide(scope.clearButton);
                helper.hide(scope.convertFontsButton);
            }

        });
    },

    clearList: function () {
        var scope = this;
        this.clearButton.addEventListener('click', function (event) {
            event.preventDefault();
            var rows = document.querySelector("#font-table tbody");
            rows.innerHTML = '';
            this.fontFiles = [];
            helper.hide(this);
            scope.setStatusMessage("Font list cleared");
        }, false);
    },

    getWeight: function (font) {
        var regexp;
        //thin
        regexp = /(extralightthin|extralightitalic)\.(ttf|otf)$/i;
        if (font.match(regexp)) return "100";

        //thin
        regexp = /(thin|thinitalic)\.(ttf|otf)$/i;
        if (font.match(regexp)) return "200";

        //light
        regexp = /(book|demi|light|bookitalic|demiitalic|lightitalic)\.(ttf|otf)$/i;
        if (font.match(regexp)) return "300";

        //medium
        regexp = /(medium|mediumitalic)\.(ttf|otf)$/i;
        if (font.match(regexp)) return "500";

        //semi-bold
        regexp = /(semibold|demibold|demibolditalic|semibolditalic)\.(ttf|otf)$/i;
        if (font.match(regexp)) return "600";

        //black
        regexp = /(flat|extrablack|extrablackitalic|flatitalic|poster|posteritalic|utlrablack|ultrablackitalic)\.(ttf|otf)$/i;
        if (font.match(regexp)) return "900";

        //bold
        regexp = /(black|heavy|extrabold|blackitalic|heavyitalic|extrabolditalic)\.(ttf|otf)$/i;
        if (font.match(regexp)) return "800";

        //bold
        regexp = /(bold|bolditalic)\.(ttf|otf)$/i;
        if (font.match(regexp)) return "700";

        //default regular
        return "400";
    },

    getStyle: function (font) {
        if (font.match(/(italic|it)\.(ttf|otf)$/i)) return "italic";
        return "normal";
    },

    makeSelect: function (name, options, current) {
        var selectGroup = '<select class="form-control" name="' + name + '">';
        for (var val in options) {
            if (options.hasOwnProperty(val)) {
                selectGroup += '<option value="'+val+'" ' + (current === val ? 'selected="selected"' : '') + '>' + options[val] + '</option>';
            }
        }
        selectGroup += '</select>';
        return selectGroup;
    },

    currentList: function () {
        var tBody = document.querySelector("#font-table tbody");
        var currentList = [];

        for(var i = 0, row; row = tBody.rows[i]; i++) {
            var selects = row.getElementsByTagName('select');
            var fontName = row.dataset.name;
            var path = row.dataset.file;
            currentList[fontName] = {
                weight: selects[0].options[selects[0].selectedIndex].value,
                style: selects[1].options[selects[1].selectedIndex].value,
                path: path
            }
        }

        return currentList;
    },

    generateFonts: function () {
        var scope = this;
        this.convertFontsButton.addEventListener('click', function (event) {
            event.preventDefault();
            var currentList = scope.currentList();
            if (Object.keys(currentList).length > 0) {
                for (var fontName in currentList) {
                    if (currentList.hasOwnProperty(fontName)) {
                        var ext = scope.getExtension(fontName);
                        var ttfFont = null;
                        scope.copy(currentList[fontName].path, scope.tempPath);
                        if (ext === 'otf') {
                            ttfFont = scope.makeTTF(currentList[fontName].path);
                        }
                    }
                }
            } else {
                scope.setStatusMessage("Font list is empty. Nothing to do");
                helper.hide(scope.convertFontsButton);
            }
        }, false);
    },

    makeTTF: function (otfFont) {
        var otf2ttf = require("otf2ttf");

    },

    makeEOT: function (otfFont) {

    },

    makeSVG: function (otfFont) {

    },

    makeWOFF: function (otfFont) {

    },

    makeWOFF2: function (otfFont) {

    },

    copy: function (sourceFile, targetDir, newName) {
        var scope = this;
        newName = newName || sourceFile.split('/').pop();
        if (!fs.existsSync(targetDir)) {
            fs.mkdirSync(targetDir);
        }

        var targetFile = path.join(targetDir, newName);

        var rd = fs.createReadStream(sourceFile);
        rd.on("error", function (error) {
            console.log(error);
        });

        var wr = fs.createWriteStream(targetFile);
        wr.on("error", function (error) {
            console.log(error);
        });
        wr.on("close", function () {
            if (scope.isDebug()) console.log("Done");
        });
        rd.pipe(wr);

    },

    deleteFile: function (file) {
        if (!fs.existsSync(file)) {
            return true;
        }

        var success = true;
        fs.unlink(file, function (err) {
            if (err) {
                console.log(err);
                success = false;
            }
        });

        if (this.isDebug()) {
            console.log("Deleted: " + file);
        }

        return success;
    },

    emptyTemp: function () {
        var scope = this;
        fs.readdir(this.tempPath, function (err, list) {
            if (!err) {
                for (var i = 0; i < list.length; i++) {
                    scope.deleteFile(path.join(scope.tempPath, list[i]));
                }
            }
        });
    },

    /**
     * get fontforge Path
     */
    checkForFontForge: function () {
        var fontForgePath = false;
        switch (os.platform()) {
            case 'darvin' : // macOs
                            // get command
                break;
            case 'linux':
                try {
                    var stdout = exec('command -v fontforge');
                    fontForgePath = stdout.toString("utf-8");
                    if (this.isDebug()) {
                        console.log("command: ", stdout.toString("utf-8"));
                    }
                    this.settingsSet("fontForgePath", fontForgePath);
                } catch (e) {
                    if (this.isDebug()) {
                        console.log(e);
                    }
                }
                break;
            case "win32":
            case "win64":
                //windows
                break;
            default:
                return false;
        }
    },

    buildMenu: function () {

        var scope = this;

        var fileMenu = new nw.MenuItem({
            label: "File",
            key: "f",
            modifiers: "alt"
        });

        var menu = new nw.Menu({type: "menubar"});

        var fileSubMenu = new nw.Menu();
        fileSubMenu.append(new nw.MenuItem({
            label: "Settings",
            click: function () {
                scope.settingsWindow();
            },
            key: "s",
            modifiers: "alt"
        }));
        fileSubMenu.append(new nw.MenuItem({type: "separator"}));
        fileSubMenu.append(new nw.MenuItem({
            label: "About",
            click: function () {
                // todo: make "about" window
            },
            key: "a",
            modifiers: "alt"
        }));

        fileMenu.submenu = fileSubMenu;

        menu.append(fileMenu);

        win.menu = menu;
    }
};

app.init();